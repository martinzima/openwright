---
description: 
globs: 
alwaysApply: true
---
Further details about APIs used:

## Angular Resource API (18+) Instructions

### Angular Signals `resource()` API
- **Import**:
```typescript
import { resource } from '@angular/core';
```

- **Signature**:
```typescript
resource<T, Request>({
  request: () => Request | undefined,
  loader: ({ request, abortSignal }) => Promise<T>
}): Resource<T>;
```

- **Basic Usage**:
```typescript
const userResource = resource({
  request: () => ({ id: userIdSignal() }),
  loader: async ({ request, abortSignal }) => {
    const res = await fetch(`/api/user/${request.id}`, { signal: abortSignal });
    return res.json();
  }
});
```

- **Reactive Resource Signals**:
  - `.value`: Signal<T | undefined>
  - `.isLoading`: Signal<boolean>
  - `.error`: Signal<any | undefined>
  - `.reload()`: Manually triggers reload.

### Lazy Loading Data
- Conditionally return `undefined`:
```typescript
const shouldLoad = signal(false);
const lazyResource = resource({
  request: () => shouldLoad() ? { filter: filterSig() } : undefined,
  loader: ({ request }) => fetchData(request.filter)
});

// trigger load:
shouldLoad.set(true);
```

### Debouncing Inputs
- **Import**:
```typescript
import { toSignal, toObservable } from '@angular/core/rxjs-interop';
import { debounceTime } from 'rxjs';
```

- Example:
```typescript
const inputSig = signal('');
const debouncedInput = toSignal(
  toObservable(inputSig).pipe(debounceTime(300)),
  { initialValue: '' }
);

const searchResource = resource({
  request: () => debouncedInput() ? { query: debouncedInput() } : undefined,
  loader: ({ request }) => searchApi(request.query)
});
```

### Route-based Resource Reset
```typescript
import { ActivatedRoute } from '@angular/router';
import { inject } from '@angular/core';

const route = inject(ActivatedRoute);
const id = toSignal(route.paramMap.pipe(map(p => p.get('id'))));

const detailResource = resource({
  request: () => id() ? { id: id() } : undefined,
  loader: ({ request }) => fetchDetail(request.id)
});
```

### Manual Refresh & Data Invalidation
- Reload manually or with signals:
```typescript
// manual reload
dataResource.reload();

// invalidation via signal
const refreshTick = signal(0);
const dataResource = resource({
  request: () => ({ filter: filterSig(), tick: refreshTick() }),
  loader: ({ request }) => fetchData(request.filter)
});

// trigger invalidation
refreshTick.update(x => x + 1);
```

### Local Optimistic Updates
```typescript
dataResource.set(updatedData);
```

### Custom Signal-Based Stores
Structure using Angular services / stores. This is how it should typically look:
```typescript
import { Injectable, signal, computed } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class UserStore {
  readonly state = signal<{ id?: string, user?: User }>({});

  readonly userResource = resource({
    request: () => this.state().id ? { id: this.state().id } : undefined,
    loader: ({ request }) => fetchUser(request.id)
  });

  readonly user = computed(() => this.userResource.value());
  readonly loading = this.userResource.isLoading;

  setUserId(id: string) {
    this.state.update(s => ({ ...s, id }));
  }

  refreshUser() {
    this.userResource.reload();
  }
}
```

### NGRX `rxMethod()` API
If @angular/core resource is not enough, you can resort to NGRX `rxMethod()` API.

- **Import**:
```typescript
import { rxMethod } from '@ngrx/signals/rxjs-interop';
```

- **Signature**:
```typescript
rxMethod<T, R>(
  project: (input$: Observable<T>) => Observable<R>
): SignalMethod<T, R>;
```

- **Example**:
```typescript
export class ComplexStore {
  loadData = rxMethod<void, Data[]>(trigger$ =>
    trigger$.pipe(
      switchMap(() => httpClient.get<Data[]>('/complex-data'))
    )
  );

  refreshData() {
    this.loadData();
  }

  data = this.loadData.result;
  loading = this.loadData.isLoading;
  error = this.loadData.error;
}
```

