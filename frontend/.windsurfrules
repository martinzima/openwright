1. We are developing a frontend app OpenWright for viewing automated Playwright test results.
2. We are using Angular 19 framework.
3. We are using Nx monorepo. Run the app accordingly. The app is named openwright-app in the Nx monorepo. To run "nx", use "npx nx".
3. Use PrimeNG components for the UI preferrably. You can also use Tailwind 3 a its common patterns and blocks. Aim for modern and sleek design, Apple-like, with animations, shadows, etc.
4. The app should be using standalone components and Angular signals.
5. For the state management, every page should have a separate .store.ts file with store implemented as a signal-based service. Generally, the state should be represented as one state signal, optionally
exposing further computed signals. For fetching data and other async operations, use the new resource (@angular/core) API from Angular 18+/19+ for fetching async data. Take care of debouncing user inputs and aborting requests. Load data in parallel if possible.
Don't use signalStore from Ngrx. You can however use deepComputed, signalState or rxMethod from Ngrx if needed. Generally, a simpler solution is mostly preferred.
6. API services should be defined in separate folder. For now, let them return mock data.
8. The prefix for Angular component and directive selectors is "ow".
9. Use the new Angular template control flow blocks (e.g. @if instead of *ngIf).
10. You can use ngxtension signal utilities to simplify working with Angular signals, RxJS, Observables and state management.
11. For icons, use Lucide icons (lucide-angular). Always import icons statically in the components where needed, e.g.:

import { LucideAngularModule, FileIcon } from 'lucide-angular';

@Component({
  ...
  imports: [LucideAngularModule]
})
export class AppComponent {
  readonly FileIcon = FileIcon;
}

<lucide-icon [img]="FileIcon" />

12. Don't write code comments.
13. Don't use JavaScript private fields starting with #. Instead, use TypeScript private modified if needed.

---

Further details about APIs used:

## Angular Resource API (18+) Instructions

### Angular Signals `resource()` API
- **Import**:
```typescript
import { resource } from '@angular/core';
```

- **Signature**:
```typescript
resource<T, Request>({
  request: () => Request | undefined,
  loader: ({ request, abortSignal }) => Promise<T>
}): Resource<T>;
```

- **Basic Usage**:
```typescript
const userResource = resource({
  request: () => ({ id: userIdSignal() }),
  loader: async ({ request, abortSignal }) => {
    const res = await fetch(`/api/user/${request.id}`, { signal: abortSignal });
    return res.json();
  }
});
```

- **Reactive Resource Signals**:
  - `.value`: Signal<T | undefined>
  - `.isLoading`: Signal<boolean>
  - `.error`: Signal<any | undefined>
  - `.reload()`: Manually triggers reload.

### Lazy Loading Data
- Conditionally return `undefined`:
```typescript
const shouldLoad = signal(false);
const lazyResource = resource({
  request: () => shouldLoad() ? { filter: filterSig() } : undefined,
  loader: ({ request }) => fetchData(request.filter)
});

// trigger load:
shouldLoad.set(true);
```

### Debouncing Inputs
- **Import**:
```typescript
import { toSignal, toObservable } from '@angular/core/rxjs-interop';
import { debounceTime } from 'rxjs';
```

- Example:
```typescript
const inputSig = signal('');
const debouncedInput = toSignal(
  toObservable(inputSig).pipe(debounceTime(300)),
  { initialValue: '' }
);

const searchResource = resource({
  request: () => debouncedInput() ? { query: debouncedInput() } : undefined,
  loader: ({ request }) => searchApi(request.query)
});
```

### Route-based Resource Reset
```typescript
import { ActivatedRoute } from '@angular/router';
import { inject } from '@angular/core';

const route = inject(ActivatedRoute);
const id = toSignal(route.paramMap.pipe(map(p => p.get('id'))));

const detailResource = resource({
  request: () => id() ? { id: id() } : undefined,
  loader: ({ request }) => fetchDetail(request.id)
});
```

### Manual Refresh & Data Invalidation
- Reload manually or with signals:
```typescript
// manual reload
dataResource.reload();

// invalidation via signal
const refreshTick = signal(0);
const dataResource = resource({
  request: () => ({ filter: filterSig(), tick: refreshTick() }),
  loader: ({ request }) => fetchData(request.filter)
});

// trigger invalidation
refreshTick.update(x => x + 1);
```

### Local Optimistic Updates
```typescript
dataResource.set(updatedData);
```

### Custom Signal-Based Stores
Structure using Angular services / stores. This is how it should typically look:
```typescript
import { Injectable, signal, computed } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class UserStore {
  readonly state = signal<{ id?: string, user?: User }>({});

  readonly userResource = resource({
    request: () => this.state().id ? { id: this.state().id } : undefined,
    loader: ({ request }) => fetchUser(request.id)
  });

  readonly user = computed(() => this.userResource.value());
  readonly loading = this.userResource.isLoading;

  setUserId(id: string) {
    this.state.update(s => ({ ...s, id }));
  }

  refreshUser() {
    this.userResource.reload();
  }
}
```

### NGRX `rxMethod()` API
If @angular/core resource or httpResource is not enough, you can resort to NGRX `rxMethod()` API.

- **Import**:
```typescript
import { rxMethod } from '@ngrx/signals/rxjs-interop';
```

- **Signature**:
```typescript
rxMethod<T, R>(
  project: (input$: Observable<T>) => Observable<R>
): SignalMethod<T, R>;
```

- **Example**:
```typescript
export class ComplexStore {
  loadData = rxMethod<void, Data[]>(trigger$ =>
    trigger$.pipe(
      switchMap(() => httpClient.get<Data[]>('/complex-data'))
    )
  );

  refreshData() {
    this.loadData();
  }

  data = this.loadData.result;
  loading = this.loadData.isLoading;
  error = this.loadData.error;
}
```

